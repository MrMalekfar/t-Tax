<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simin.Gold</title>
    <link rel="icon" type="image/png" href="logo.png">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Custom CSS Variables for Theming */
        :root {
            --color-gold-light: #FFD700; /* طلایی روشن */
            --color-gold-dark: #DAA520; /* طلایی تیره */
            --color-light-bg: #F8F8F8; /* پس‌زمینه خاکستری روشن */
            --color-card-light-bg: #FFFFFF; /* پس‌زمینه سفید کارت‌ها */
            --color-dark-text: #333333; /* متن خاکستری تیره */
            --color-gold-accent: #FFC107; /* طلایی کهربایی برای تاکید */
            --color-input-bg-light: #F0F0F0; /* پس‌زمینه روشن ورودی */
            --color-input-border-light: #E0E0E0; /* حاشیه روشن ورودی */
            --color-results-bg: #FFFBF0; /* پس‌زمینه بسیار روشن طلایی برای نتایج */
            --color-results-border: #FFD700; /* حاشیه طلایی برای نتایج */
        }

        /* Base Body Styles */
        body {
            font-family: "Inter", sans-serif;
            direction: rtl;
            text-align: right;
            background-color: var(--color-light-bg);
            color: var(--color-dark-text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            padding: 10px;
            padding-top: 80px; /* فضای لازم برای نوار بالایی ثابت در موبایل */
        }
        @media (min-width: 768px) {
            body {
                padding-top: 60px; /* فضای لازم برای نوار بالایی ثابت در دسکتاپ */
            }
        }

        /* Highlighted Result Text Styles */
        .highlighted-result {
            font-size: 1.125rem; /* Mobile first font size */
            color: var(--color-gold-dark);
            font-weight: bold;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--color-gold-light);
            padding-bottom: 0.5rem;
        }
        @media (min-width: 768px) {
             .highlighted-result {
                font-size: 1.25rem; /* Desktop font size */
            }
        }

        /* Gold Gradient Button Styles */
        .btn-gold-gradient {
            background: linear-gradient(145deg, var(--color-gold-light), var(--color-gold-dark));
            color: var(--color-dark-text);
            transition: all 0.3s ease-in-out;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.4);
        }

        .btn-gold-gradient:hover {
            background: linear-gradient(145deg, var(--color-gold-dark), var(--color-gold-light));
            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.6);
            transform: translateY(-2px);
        }

        /* Input Focus Styles */
        input:focus, select:focus {
            outline: none;
            border-color: var(--color-gold-accent);
            box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.5);
        }

        /* Tab Button Styles (No @apply needed here for custom props) */
        .tab-button {
            font-weight: 600;
            background-color: var(--color-card-light-bg);
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            font-size: 0.8rem;
        }
        @media (min-width: 640px) {
            .tab-button {
                font-size: 0.9rem;
            }
        }
        
        .tab-button:hover {
            background-color: #fcfcfc;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .tab-button.active {
            background-color: var(--color-results-bg);
            border-color: var(--color-gold-dark) !important;
        }
        
        /* Desktop specific shadows/borders are handled by Tailwind classes */
        @media (min-width: 768px) {
            .tab-button.active {
                box-shadow: 4px 0 20px rgba(255, 193, 7, 0.4);
            }
        }
        /* Mobile specific shadows/borders */
         @media (max-width: 767px) {
            .tab-button.active {
                box-shadow: 0 4px 20px rgba(255, 193, 7, 0.4);
            }
        }

        /* Tab Button Content & Icon Placeholder Colors */
        .tab-button .tab-button-content,
        .tab-button .icon-placeholder {
            color: var(--color-dark-text);
            transition: color 0.3s ease;
        }
        
        .tab-button:hover .tab-button-content,
        .tab-button:hover .icon-placeholder {
            color: var(--color-gold-light);
        }

        /* Active Tab Content & Icon Permanent Gold Color */
        .tab-button.active .tab-button-content,
        .tab-button.active .icon-placeholder,
        .tab-button.active:hover .tab-button-content,
        .tab-button.active:hover .icon-placeholder {
            color: var(--color-gold-dark);
        }
        
        /* Icon Placeholder Sizing & Alignment */
        .tab-button .icon-placeholder {
            width: 2.5rem;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .tab-button-content {
            flex-grow: 1;
            text-align: right;
            padding-left: 0.5rem;
            font-size: 0.9rem;
        }
        @media (max-width: 767px) {
            .tab-button-content {
                padding-right: 0.5rem;
                padding-left: 0;
            }
        }

        /* Tab Content Transitions */
        .tab-content {
            display: none;
            animation: fadeInSlideUp 0.5s ease-in-out forwards;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeInSlideUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Navbar Styles */
        .navbar-top {
            background-color: var(--color-gold-dark);
            color: #333;
            padding: 5px 10px;
            font-size: 0.75rem;
            position: fixed;
            top: 0;
            left: 0; /* Ensure it sticks to the left */
            right: 0; /* Ensure it sticks to the right */
            width: 100%;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
        }

        .navbar-top span {
            margin: 0 5px;
            white-space: nowrap;
            font-weight: 500;
            padding: 3px 0;
        }

        .navbar-top span strong {
            font-weight: 700;
            color: rgb(98, 37, 37);
        }
        
        .navbar-top .last-updated-span {
            width: 100%;
            text-align: center;
            margin-top: 5px;
        }

        @media (min-width: 768px) {
            .navbar-top {
                font-size: 0.9rem;
                padding: 10px 20px;
                flex-wrap: nowrap;
                justify-content: space-around;
            }
            .navbar-top span {
                margin: 0 10px;
                padding: 5px 0;
            }
             .navbar-top .last-updated-span {
                width: auto;
                text-align: right;
                margin-top: 0;
            }
        }


        /* Custom Message Box Styles */
        #messageBox {
            background-color: #4a5568; /* Gray-700 */
            color: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
            z-index: 9999;
            text-align: center;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            max-width: 90%;
            min-width: 300px;
        }

        /* Print Styles */
        @media print {
            body { display: none; } /* Hide the main app body */
        }
        .print-only {
            display: none;
        }
        @media print {
            .no-print { display: none !important; }
            .print-only { display: block; }
            body { display: block !important; } /* Un-hide the body for printing */

            @page {
                size: A5 landscape;
                margin: 5mm;
            }

            #invoicePreviewContainer {
                display: block !important;
                border: none !important;
                box-shadow: none !important;
                margin: 0 !important;
                padding: 0 !important;
                width: 100% !important;
                height: 100% !important;
            }
        }
    </style>
</head>
<body>

    <div class="navbar-top no-print">
        <span>دلار: <strong id="display-dollar-price">--</strong> تومان</span>
        <span>گرم: <strong id="display-gold18k-price">--</strong> تومان</span>
        <span>اونس: <strong id="display-ounce-price">--</strong> دلار</span>
        <span>مثقال: <strong id="display-mesghal-price">--</strong> تومان</span>
        <span>سکه: <strong id="display-sekke-jadid-price">--</strong> تومان</span>
        <span>نیم سکه: <strong id="display-sekke-nim-price">--</strong> تومان</span>
        <span>ربع سکه: <strong id="display-sekke-rob-price">--</strong> تومان</span>
        <span class="last-updated-span">
            <strong id="display-last-updated">--</strong>
        </span>
    </div>

    <div class="main-app-container flex flex-col md:flex-row md:justify-center gap-4 md:gap-10 max-w-7xl mx-auto w-full p-4 md:p-8 rounded-3xl shadow-[0_15px_60px_rgba(0,0,0,0.1)] bg-card-light-bg border border-gold-dark/20 transition-all duration-500 no-print">
        
        <div class="w-full md:w-1/5 flex flex-col justify-start items-stretch min-w-[unset] md:min-w-[200px]">
            <h2 class="text-xl md:text-2xl font-bold mb-4 md:mb-8 text-gold-dark border-b-2 border-gold-dark pb-2 md:pb-3 text-center">
                ابزارها
            </h2>
            <div class="flex flex-row flex-wrap justify-center md:flex-col">
                <button id="btn-tab1" class="tab-button group md:flex-none flex items-center justify-center p-2.5 my-1 rounded-xl border-t-4 border-r-0 border-transparent md:flex-row md:justify-start md:p-4 md:my-2 md:rounded-l-xl md:rounded-r-none md:border-r-4 md:border-t-0 flex-row-reverse md:flex-row transition-all duration-300 transform">
                    <div class="tab-button-content">محاسبه وزن طلا</div>
                    <span class="icon-placeholder"><i class="fas fa-balance-scale-left text-xl md:text-2xl"></i></span>
                </button>
                <button id="btn-tab2" class="tab-button group md:flex-none flex items-center justify-center p-2.5 my-1 rounded-xl border-t-4 border-r-0 border-transparent md:flex-row md:justify-start md:p-4 md:my-2 md:rounded-l-xl md:rounded-r-none md:border-r-4 md:border-t-0 flex-row-reverse md:flex-row transition-all duration-300 transform">
                    <div class="tab-button-content">محاسبه‌گر جامع</div>
                    <span class="icon-placeholder"><i class="fas fa-calculator text-xl md:text-2xl"></i></span>
                </button>
                <button id="btn-tab3" class="tab-button group md:flex-none flex items-center justify-center p-2.5 my-1 rounded-xl border-t-4 border-r-0 border-transparent md:flex-row md:justify-start md:p-4 md:my-2 md:rounded-l-xl md:rounded-r-none md:border-r-4 md:border-t-0 flex-row-reverse md:flex-row transition-all duration-300 transform">
                    <div class="tab-button-content">محاسبه طلای کهنه</div>
                    <span class="icon-placeholder"><i class="fas fa-ring text-xl md:text-2xl"></i></span>
                </button>
                <button id="btn-tab6" class="tab-button group md:flex-none flex items-center justify-center p-2.5 my-1 rounded-xl border-t-4 border-r-0 border-transparent md:flex-row md:justify-start md:p-4 md:my-2 md:rounded-l-xl md:rounded-r-none md:border-r-4 md:border-t-0 flex-row-reverse md:flex-row transition-all duration-300 transform">
                    <div class="tab-button-content">محاسبه آبشده</div>
                    <span class="icon-placeholder"><i class="fas fa-fire text-xl md:text-2xl"></i></span>
                </button>
                <button id="btn-tab4" class="tab-button group md:flex-none flex items-center justify-center p-2.5 my-1 rounded-xl border-t-4 border-r-0 border-transparent md:flex-row md:justify-start md:p-4 md:my-2 md:rounded-l-xl md:rounded-r-none md:border-r-4 md:border-t-0 flex-row-reverse md:flex-row transition-all duration-300 transform">
                    <div class="tab-button-content">صدور فاکتور</div>
                    <span class="icon-placeholder"><i class="fas fa-file-invoice-dollar text-xl md:text-2xl"></i></span>
                </button>
                <button id="btn-tab5" class="tab-button group md:flex-none flex items-center justify-center p-2.5 my-1 rounded-xl border-t-4 border-r-0 border-transparent md:flex-row md:justify-start md:p-4 md:my-2 md:rounded-l-xl md:rounded-r-none md:border-r-4 md:border-t-0 flex-row-reverse md:flex-row transition-all duration-300 transform">
                    <div class="tab-button-content">مدیریت اجناس</div>
                    <span class="icon-placeholder"><i class="fas fa-gem text-xl md:text-2xl"></i></span>
                </button>
            </div>
        </div>

        <div class="w-full md:w-4/5 relative mt-4 md:mt-0"> 
            <div id="tab-column1" class="tab-content p-2 sm:p-4">
                <h2 class="text-lg sm:text-xl font-bold mb-4 sm:mb-6 text-gold-dark border-b border-gold-dark pb-2 sm:pb-3">
                    محاسبه وزن طلا (بر اساس قیمت هدف)
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="price_gram1" class="text-sm sm:text-base font-semibold text-dark-text mb-2">نرخ گرم (18):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="price_gram1" value="" oninput="App.Utils.formatNumberInput(this)" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="goldPurity1" class="text-sm sm:text-base font-semibold text-dark-text mb-2">عیار:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="goldPurity1" list="purity-list" value="750" step="any" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="wage1" class="text-sm sm:text-base font-semibold text-dark-text mb-2">اجرت (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="wage1" value="5" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="profit1" class="text-sm sm:text-base font-semibold text-dark-text mb-2">سود (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="profit1" value="5" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="VAT1" class="text-sm sm:text-base font-semibold text-dark-text mb-2">مالیات (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="VAT1" value="10" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="price_whole1" class="text-sm sm:text-base font-semibold text-dark-text mb-2">قیمت هدف :</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="price_whole1" value="68,000,000" oninput="App.Utils.formatNumberInput(this)" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                </div>
                <button id="calculateBtn1" class="btn-gold-gradient w-full py-2 sm:py-3 rounded-lg text-sm sm:text-base font-bold mt-4 sm:mt-6">
                    محاسبه و ذخیره
                </button>

                <div class="results mt-4 sm:mt-6 p-3 sm:p-5 bg-results-bg rounded-lg border border-results-border">
                    <p class="highlighted-result">وزن محاسبه شده: <span id="display-weight1" class="font-bold text-gold-dark">0</span> گرم</p>
                    <p class="text-sm sm:text-base mb-1 sm:mb-2 text-dark-text">مالیات بر ارزش افزوده : <span id="display-tax1" class="font-extrabold text-gold-dark">0</span> تومان</p>
                    <p class="text-sm sm:text-base mb-1 sm:mb-2 text-dark-text">قیمت قبل از محاسبه مالیات : <span id="display-price-before-tax1" class="font-extrabold text-gold-dark">0</span> تومان</p>
                    <button id="invoiceFromCalc1" class="btn-gold-gradient w-full py-2 rounded-lg text-sm font-bold mt-4 hidden">
                        <i class="fas fa-file-invoice-dollar mr-2"></i>صدور فاکتور برای این محاسبه
                    </button>
                </div>
            </div>

            <div id="tab-column2" class="tab-content p-2 sm:p-4">
                <h2 class="text-lg sm:text-xl font-bold mb-4 sm:mb-6 text-gold-dark border-b border-gold-dark pb-2 sm:pb-3">
                    محاسبه‌گر جامع
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="price_gram2" class="text-sm sm:text-base font-semibold text-dark-text mb-2">نرخ گرم (18):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="price_gram2" value="" oninput="App.Utils.formatNumberInput(this)" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="goldPurity2" class="text-sm sm:text-base font-semibold text-dark-text mb-2">عیار:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                             <input type="number" id="goldPurity2" list="purity-list" value="750" step="any" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="weight2" class="text-sm sm:text-base font-semibold text-dark-text mb-2">وزن:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="weight2" value="0" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                            <span class="text-gold-dark mr-2 text-sm"></span>
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="wage2" class="text-sm sm:text-base font-semibold text-dark-text mb-2">اجرت (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="wage2" value="20" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="profit2" class="text-sm sm:text-base font-semibold text-dark-text mb-2">سود (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="profit2" value="7" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="VAT2" class="text-sm sm:text-base font-semibold text-dark-text mb-2">مالیات (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="VAT2" value="10" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                </div>
                <button id="calculateBtn2" class="btn-gold-gradient w-full py-2 sm:py-3 rounded-lg text-sm sm:text-base font-bold mt-4 sm:mt-6">
                    محاسبه و ذخیره
                </button>

                <div class="results mt-4 sm:mt-6 p-3 sm:p-5 bg-results-bg rounded-lg border border-results-border">
                    <p class="highlighted-result">قیمت نهایی: <span id="display-price-after-tax2" class="font-bold text-gold-dark">0</span> تومان</p>
                    <p class="text-sm sm:text-base mb-1 sm:mb-2 text-dark-text">وزن در عیار 750: <span id="display-adjusted_wheight_to_750" class="font-bold text-gold-dark">0</span> گرم</p>
                    <p class="text-sm sm:text-base mb-1 sm:mb-2 text-dark-text">مالیات بر ارزش افزوده: <span id="display-tax2" class="font-extrabold text-gold-dark">0</span> تومان</p>
                    <p class="text-sm sm:text-base mb-1 sm:mb-2 text-dark-text">قیمت قبل از محاسبه مالیات: <span id="display-weight2" class="font-extrabold text-gold-dark">0</span> تومان</p>
                    <p class="text-sm sm:text-base mb-1 sm:mb-2 text-dark-text">قیمت هر گرم با احتساب اجرت و سود: <span id="display-gram-price-after-tax2" class="font-extrabold text-gold-dark">0</span> تومان</p>
                    <button id="invoiceFromCalc2" class="btn-gold-gradient w-full py-2 rounded-lg text-sm font-bold mt-4 hidden">
                        <i class="fas fa-file-invoice-dollar mr-2"></i>صدور فاکتور برای این محاسبه
                    </button>
                </div>
            </div>

            <div id="tab-column3" class="tab-content p-2 sm:p-4">
                <h2 class="text-lg sm:text-xl font-bold mb-4 sm:mb-6 text-gold-dark border-b border-gold-dark pb-2 sm:pb-3">
                    محاسبه طلای کهنه
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="price_gram3" class="text-sm sm:text-base font-semibold text-dark-text mb-2">نرخ گرم (18):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="price_gram3" value="" oninput="App.Utils.formatNumberInput(this)" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="goldPurity3" class="text-sm sm:text-base font-semibold text-dark-text mb-2">عیار:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                             <input type="number" id="goldPurity3" list="purity-list" value="750" step="any" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>

                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="weight_input3" class="text-sm sm:text-base font-semibold text-dark-text mb-2">وزن:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="weight_input3" value="1" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                            <span class="text-gold-dark mr-2 text-sm"></span>
                        </div>
                    </div>
                </div>
                <button id="calculateBtn3" class="btn-gold-gradient w-full py-2 sm:py-3 rounded-lg text-sm sm:text-base font-bold mt-4 sm:mt-6">
                    محاسبه و ذخیره
                </button>

                <div class="results mt-4 sm:mt-6 p-3 sm:p-5 bg-results-bg rounded-lg border border-results-border">
                    <p class="highlighted-result">قیمت نهایی: <span id="display-total-price3" class="font-bold text-gold-dark">0</span> تومان</p>
                    <button id="invoiceFromCalc3" class="btn-gold-gradient w-full py-2 rounded-lg text-sm font-bold mt-4 hidden">
                        <i class="fas fa-file-invoice-dollar mr-2"></i>صدور فاکتور برای این محاسبه
                    </button>
                </div>
            </div>
            
            <div id="tab-column6" class="tab-content p-2 sm:p-4">
                <h2 class="text-lg sm:text-xl font-bold mb-4 sm:mb-6 text-gold-dark border-b border-gold-dark pb-2 sm:pb-3">
                    محاسبه خرید و فروش آبشده
                </h2>
        
                <div class="flex items-center justify-center gap-6 mb-6">
                    <label class="flex items-center gap-2 cursor-pointer text-lg font-semibold">
                        <input type="radio" name="transaction_type6" value="sell" class="form-radio h-5 w-5 text-gold-dark focus:ring-gold-accent" checked>
                        <span>فروش</span>
                    </label>
                    <label class="flex items-center gap-2 cursor-pointer text-lg font-semibold">
                        <input type="radio" name="transaction_type6" value="buy" class="form-radio h-5 w-5 text-gold-dark focus:ring-gold-accent">
                        <span>خرید</span>
                    </label>
                </div>
        
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="price_mesghal6" class="text-sm sm:text-base font-semibold text-dark-text mb-2">نرخ مثقال آبشده (750):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="price_mesghal6" value="" oninput="App.Utils.formatNumberInput(this)" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="goldPurity6" class="text-sm sm:text-base font-semibold text-dark-text mb-2">عیار:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                             <input type="number" id="goldPurity6" list="purity-list" value="750" step="any" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="weight_mesghal6" class="text-sm sm:text-base font-semibold text-dark-text mb-2">وزن (مثقال):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="weight_mesghal6" value="1" step="0.01" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="profit_melted" class="text-sm sm:text-base font-semibold text-dark-text mb-2">سود (%):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="number" id="profit_melted" value="2" step="0.5" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                    <div id="buyDeductionContainer6" class="responsive-input-group flex-col mb-4 hidden">
                        <label for="buy_deduction6" class="text-sm sm:text-base font-semibold text-dark-text mb-2">کسری خرید (تومان):</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="buy_deduction6" value="100,000" oninput="App.Utils.formatNumberInput(this)" class="w-full p-2 sm:p-3 rounded-md border text-left text-sm bg-input-bg-light text-dark-text border-input-border-light">
                        </div>
                    </div>
                </div>
                <button id="calculateBtn6" class="btn-gold-gradient w-full py-2 sm:py-3 rounded-lg text-sm sm:text-base font-bold mt-4 sm:mt-6">
                    محاسبه
                </button>
        
                <div class="results mt-4 sm:mt-6 p-3 sm:p-5 bg-results-bg rounded-lg border border-results-border">
                    <p class="highlighted-result">قیمت نهایی: <span id="display-total-price6" class="font-bold text-gold-dark">0</span> تومان</p>
                </div>

                <button id="invoiceFromCalc6" class="btn-gold-gradient w-full py-2 rounded-lg text-sm font-bold mt-4 hidden">
                    <i class="fas fa-file-invoice-dollar mr-2"></i>صدور فاکتور برای این محاسبه
                </button>
            </div>
            
            <div id="tab-column4" class="tab-content p-2 sm:p-4">
                <h2 class="text-lg sm:text-xl font-bold mb-4 sm:mb-6 text-gold-dark border-b border-gold-dark pb-2 sm:pb-3">
                    صدور فاکتور طلا
                </h2>

                <div class="mb-6 p-4 border rounded-lg bg-gray-50">
                    <h3 class="text-lg font-semibold mb-3 text-gold-dark">مشخصات مشتری</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="responsive-input-group flex flex-col mb-4">
                            <label for="customerName" class="text-sm sm:text-base font-semibold text-dark-text mb-2">نام و نام خانوادگی:</label>
                            <div class="input-wrapper flex-1 flex items-center w-full">
                                <input type="text" id="customerName" class="w-full p-2 rounded-md border text-right bg-input-bg-light border-input-border-light text-sm">
                            </div>
                        </div>
                        <div class="responsive-input-group flex flex-col mb-4">
                            <label for="customerPhone" class="text-sm sm:text-base font-semibold text-dark-text mb-2">شماره تماس:</label>
                            <div class="input-wrapper flex-1 flex items-center w-full">
                                <input type="text" id="customerPhone" class="w-full p-2 rounded-md border text-left bg-input-bg-light border-input-border-light text-sm" placeholder="مثال: 09121234567">
                            </div>
                        </div>
                        <div class="responsive-input-group flex flex-col mb-4">
                            <label for="invoiceDate" class="text-sm sm:text-base font-semibold text-dark-text mb-2">تاریخ فاکتور:</label>
                            <div class="input-wrapper flex-1 flex items-center w-full">
                                <input type="text" id="invoiceDate" class="w-full p-2 rounded-md border text-left bg-input-bg-light border-input-border-light text-sm" placeholder="به صورت خودکار تکمیل می شود" readonly>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-6 p-4 border rounded-lg bg-gray-50">
                    <h3 class="text-lg font-semibold mb-3 text-gold-dark flex justify-between items-center">
                        جزئیات اقلام طلا
                        <button id="addGoldItemBtn" class="px-4 py-2 text-white rounded-md text-sm hover:bg-gold-dark transition-colors inline-flex items-center justify-center" style="background-color: var(--color-gold-accent);">
                            <i class="fas fa-plus ml-1"></i>افزودن آیتم
                        </button>
                    </h3>
                    <div id="goldItemsContainer" class="p-2">
                    </div>
                </div>

                <button id="generateInvoiceBtn" class="btn-gold-gradient w-full py-2 sm:py-3 rounded-lg text-sm sm:text-base font-bold mt-4 sm:mt-6">
                    پیش‌نمایش و چاپ فاکتور
                </button>

                <div id="invoicePreviewContainerWrapper" class="hidden mt-6">
                     <h3 class="text-lg font-semibold mb-3 text-gold-dark">پیش‌نمایش فاکتور (سایز A5 Landscape)</h3>
                     <div id="invoicePreviewContainer" class="p-4 bg-white border border-gray-300 rounded-lg shadow-lg mx-auto" style="width: 210mm; min-height: 148mm; box-sizing: border-box;">
                             </div>
                </div>
            </div>

            <div id="tab-column5" class="tab-content p-2 sm:p-4">
                <h2 class="text-lg sm:text-xl font-bold mb-4 sm:mb-6 text-gold-dark border-b border-gold-dark pb-2 sm:pb-3">
                    مدیریت اجناس (آفلاین)
                </h2>

                <div id="product-form-container" class="mb-6 p-4 border rounded-lg bg-gray-50">
                    <h3 id="product-form-title" class="text-lg font-semibold mb-3 text-gold-dark">افزودن جنس جدید</h3>
                    <form id="product-form">
                        <input type="hidden" id="productId">
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            <div class="responsive-input-group flex flex-col mb-4">
                                <label for="productName" class="text-sm sm:text-base font-semibold text-dark-text mb-2">نام/شرح کالا:</label>
                                <div class="input-wrapper flex-1 flex items-center w-full">
                                    <input type="text" id="productName" required class="w-full p-2 rounded-md border text-right bg-input-bg-light border-input-border-light text-sm">
                                </div>
                            </div>
                            <div class="responsive-input-group flex flex-col mb-4">
                                <label for="productWeight" class="text-sm sm:text-base font-semibold text-dark-text mb-2">وزن:</label>
                                <div class="input-wrapper flex-1 flex items-center w-full">
                                    <input type="number" id="productWeight" step="0.01" required class="w-full p-2 rounded-md border text-left bg-input-bg-light border-input-border-light text-sm">
                                </div>
                            </div>
                            <div class="responsive-input-group flex flex-col mb-4">
                                <label for="productPurity" class="text-sm sm:text-base font-semibold text-dark-text mb-2">عیار:</label>
                                <div class="input-wrapper flex-1 flex items-center w-full">
                                    <input type="number" id="productPurity" list="purity-list" value="750" step="any" class="w-full p-2 rounded-md border text-left bg-input-bg-light border-input-border-light text-sm">
                                </div>
                            </div>
                            <div class="responsive-input-group flex flex-col mb-4">
                                <label for="productWage" class="text-sm sm:text-base font-semibold text-dark-text mb-2">اجرت (%):</label>
                                <div class="input-wrapper flex-1 flex items-center w-full">
                                    <input type="number" id="productWage" value="20" class="w-full p-2 rounded-md border text-left bg-input-bg-light border-input-border-light text-sm">
                                </div>
                            </div>
                        </div>
                        <div class="flex gap-4 mt-4">
                            <button type="submit" class="btn-gold-gradient py-2 rounded-lg text-sm font-bold flex-1">
                                <i class="fas fa-save mr-2"></i><span id="product-form-submit-btn-text">ذخیره جنس</span>
                            </button>
                            <button type="button" id="cancelEditBtn" class="hidden py-2 px-4 rounded-lg text-sm font-bold bg-gray-400 text-white hover:bg-gray-500 transition-colors">
                                <i class="fas fa-times mr-2"></i>لغو ویرایش
                            </button>
                        </div>
                    </form>
                </div>

                <div class="p-4 border rounded-lg bg-gray-50">
                    <h3 class="text-lg font-semibold mb-3 text-gold-dark">لیست اجناس ذخیره شده</h3>
                    <div class="responsive-input-group flex flex-col mb-4">
                        <label for="productSearch" class="text-sm sm:text-base font-semibold text-dark-text mb-2">جستجو بر اساس نام:</label>
                        <div class="input-wrapper flex-1 flex items-center w-full">
                            <input type="text" id="productSearch" class="w-full p-2 rounded-md border text-right bg-input-bg-light border-input-border-light text-sm" placeholder="نام کالا را وارد کنید...">
                        </div>
                    </div>
                    <div id="productList" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                        <p id="no-products-message" class="col-span-full text-center text-gray-500">هیچ جنسی ذخیره نشده است.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="messageBox" class="hidden">
    </div>
    
    <div id="print-area" class="print-only"></div>

    <datalist id="purity-list">
        <option value="750">18 عیار</option>
        <option value="583.3">14 عیار</option>
        <option value="708.3">17 عیار</option>
        <option value="791.6">19 عیار</option>
        <option value="875">21 عیار</option>
        <option value="916">22 عیار</option>
        <option value="999.9">24 عیار</option>
    </datalist>

<script>
    // Global App Object for Modularity
    const App = {
        liveGoldPrice18k: 0,
        liveMesghalPrice: 0,
        userModifiedPrices: {},

        DB: {
            db: null,
            initDB: function() {
                const request = window.indexedDB.open('SiminGoldDB', 2);

                request.onerror = (event) => {
                    console.error("خطا در باز کردن IndexedDB:", event.target.error);
                    App.UI.showMessage("خطا در دسترسی به حافظه آفلاین. امکان ذخیره اجناس وجود ندارد.");
                };

                request.onupgradeneeded = (event) => {
                    this.db = event.target.result;
                    console.log("در حال ساخت یا بروزرسانی آبجکت استور...");
                    if (!this.db.objectStoreNames.contains('products')) {
                        const objectStore = this.db.createObjectStore("products", { keyPath: "id", autoIncrement: true });
                        objectStore.createIndex("name", "name", { unique: false });
                        console.log("آبجکت استور 'products' با موفقیت ساخته شد.");
                    }
                };

                request.onsuccess = (event) => {
                    this.db = event.target.result;
                    console.log("اتصال به IndexedDB با موفقیت برقرار شد.");
                    this.renderProducts();
                };
            },

            saveProduct: function(product) {
                if (!this.db) {
                    App.UI.showMessage("اتصال به پایگاه داده برقرار نیست.");
                    return;
                }
                const transaction = this.db.transaction(["products"], "readwrite");
                const objectStore = transaction.objectStore("products");
                const request = product.id ? objectStore.put(product) : objectStore.add(product);
                
                request.onsuccess = () => {
                    App.UI.showMessage(`جنس "${product.name}" با موفقیت ذخیره شد.`, 'success');
                    this.renderProducts();
                };
                
                request.onerror = (event) => {
                    console.error("خطا در ذخیره جنس:", event.target.error);
                    App.UI.showMessage("خطا در ذخیره جنس.");
                };
            },
            
            getProduct: function(id, callback) {
                if (!this.db) return;
                const transaction = this.db.transaction(["products"], "readonly");
                const objectStore = transaction.objectStore("products");
                const request = objectStore.get(id);

                request.onsuccess = (event) => {
                    if(callback) callback(event.target.result);
                };
                 request.onerror = (event) => {
                    console.error(`خطا در گرفتن جنس با ID ${id}:`, event.target.error);
                };
            },
            
            deleteProduct: function(id) {
                if (!this.db) return;
                const transaction = this.db.transaction(["products"], "readwrite");
                const objectStore = transaction.objectStore("products");
                const request = objectStore.delete(id);

                request.onsuccess = () => {
                    App.UI.showMessage("جنس با موفقیت حذف شد.", 'success');
                    this.renderProducts();
                };
                
                request.onerror = (event) => {
                    console.error(`خطا در حذف جنس با ID ${id}:`, event.target.error);
                    App.UI.showMessage("خطا در حذف جنس.");
                };
            },

            renderProducts: function(productsToRender = null) {
                const productListDiv = document.getElementById('productList');
                const noProductsMessage = document.getElementById('no-products-message');
                productListDiv.innerHTML = ''; 

                const display = (products) => {
                    if (products.length === 0) {
                        productListDiv.appendChild(noProductsMessage);
                        noProductsMessage.classList.remove('hidden');
                        return;
                    }
                    noProductsMessage.classList.add('hidden');
                    products.forEach(product => {
                        const card = `
                            <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200 flex flex-col gap-2">
                                <p class="font-bold text-lg">${product.name}</p>
                                <p class="text-sm"><strong>وزن:</strong> ${product.weight}</p>
                                <p class="text-sm"><strong>عیار:</strong> ${product.purity}</p>
                                <p class="text-sm"><strong>اجرت:</strong> ${product.wage}%</p>
                                <div class="flex gap-2 mt-2">
                                    <button class="px-3 py-1 text-xs rounded-md text-white transition-colors flex-1 text-center bg-blue-500 hover:bg-blue-600" data-id="${product.id}" data-action="edit">ویرایش</button>
                                    <button class="px-3 py-1 text-xs rounded-md text-white transition-colors flex-1 text-center bg-red-500 hover:bg-red-600" data-id="${product.id}" data-action="delete">حذف</button>
                                    <button class="px-3 py-1 text-xs rounded-md text-white transition-colors flex-1 text-center bg-green-500 hover:bg-green-600" data-id="${product.id}" data-action="use">استفاده در فاکتور</button>
                                </div>
                            </div>
                        `;
                        productListDiv.insertAdjacentHTML('beforeend', card);
                    });
                };
                
                if (productsToRender) {
                    display(productsToRender);
                } else {
                    if (!this.db) return;
                    const transaction = this.db.transaction(["products"], "readonly");
                    const objectStore = transaction.objectStore("products");
                    const request = objectStore.getAll();
                    
                    request.onsuccess = (event) => {
                        display(event.target.result);
                    };
                    request.onerror = (event) => {
                        console.error("خطا در خواندن اجناس:", event.target.error);
                    };
                }
            },
            
            searchProducts: function(query) {
                if (!this.db) return;
                const transaction = this.db.transaction(["products"], "readonly");
                const objectStore = transaction.objectStore("products");
                
                if (query.trim() === '') {
                    this.renderProducts();
                    return;
                }
                
                const request = objectStore.getAll();
                request.onsuccess = (event) => {
                    const allProducts = event.target.result;
                    const filteredProducts = allProducts.filter(p => p.name.includes(query));
                    this.renderProducts(filteredProducts);
                };

                 request.onerror = (event) => {
                    console.error("خطا در جستجو:", event.target.error);
                };
            }
        },

        Utils: {
            formatNumber: (number) => new Intl.NumberFormat('en-US').format(number),
            unformatNumber: (string) => parseFloat(String(string).replace(/,/g, '')) || 0,
            formatNumberInput: function(input) {
                let value = input.value.replace(/,/g, '');
                if (!isNaN(value) && value.trim() !== '') {
                    input.value = this.formatNumber(value);
                }
            },
            getInputValue: function(id, defaultValue = 0) {
                const element = document.getElementById(id);
                if (!element) return defaultValue;
                if (element.tagName === 'SELECT') return parseFloat(element.value) || defaultValue;
                const value = element.type.startsWith('text') ? this.unformatNumber(element.value) : parseFloat(element.value);
                return isNaN(value) ? defaultValue : value;
            },
            setInputValueAndLocalStorage: function(id, value) {
                const element = document.getElementById(id);
                if (!element) return;
                if (element.type.startsWith('text') && (id.includes('price_gram') || id.includes('price_whole') || id.includes('price_mesghal') || id.includes('buy_deduction'))) {
                    element.value = this.formatNumber(value);
                } else {
                    element.value = value;
                }
                localStorage.setItem(id, value);
            },
            loadValuesFromLocalStorage: function() {
                const inputs = [
                    'price_whole1', 'wage1', 'profit1', 'VAT1', 'price_gram1', 'goldPurity1',
                    'weight2', 'wage2', 'profit2', 'VAT2', 'price_gram2', 'goldPurity2',
                    'weight_input3', 'price_gram3', 'goldPurity3',
                    'price_mesghal6', 'weight_mesghal6', 'goldPurity6', 'profit_melted', 'buy_deduction6',
                    'customerName', 'customerPhone'
                ];
                inputs.forEach(id => {
                    const savedValue = localStorage.getItem(id);
                    if (savedValue !== null) {
                        const element = document.getElementById(id);
                        if (element) {
                            if (element.type.startsWith('text') && (id.includes('price_gram') || id.includes('price_whole') || id.includes('price_mesghal') || id.includes('buy_deduction'))) {
                                element.value = this.formatNumber(parseFloat(savedValue));
                            } else {
                                element.value = savedValue;
                            }
                        }
                    }
                });
                // Restore radio button state for melted gold calculator
                const savedTransactionType = localStorage.getItem('transaction_type6');
                if (savedTransactionType) {
                    const radioBtn = document.querySelector(`input[name="transaction_type6"][value="${savedTransactionType}"]`);
                    if (radioBtn) radioBtn.checked = true;
                }
            },
            generateUniqueId: () => 'item_' + Date.now() + Math.floor(Math.random() * 1000)
        },

        UI: {
            showMessage: function(message, type = 'error') {
                const msgBox = document.getElementById('messageBox');
                let bgColor = type === 'success' ? '#2f855a' : '#c53030'; // green-700 or red-700
                msgBox.style.backgroundColor = bgColor;
                msgBox.innerHTML = `<p>${message}</p><button class="mt-4 px-4 py-2 bg-black bg-opacity-20 rounded hover:bg-opacity-30 transition-colors">بستن</button>`;
                msgBox.classList.remove('hidden');
                msgBox.querySelector('button').onclick = () => msgBox.classList.add('hidden');
            },
            
            showConfirmation: function(message, onConfirm) {
                const msgBox = document.getElementById('messageBox');
                msgBox.style.backgroundColor = '#4a5568'; // gray-700
                msgBox.innerHTML = `
                    <p>${message}</p>
                    <div class="flex justify-center gap-4 mt-4">
                        <button id="confirmBtn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors">بله، حذف کن</button>
                        <button id="cancelBtn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded transition-colors">لغو</button>
                    </div>
                `;
                msgBox.classList.remove('hidden');
                document.getElementById('confirmBtn').onclick = () => {
                    onConfirm();
                    msgBox.classList.add('hidden');
                };
                document.getElementById('cancelBtn').onclick = () => {
                    msgBox.classList.add('hidden');
                };
            },

            showTab: function(tabId) {
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
                
                const content = document.getElementById(tabId);
                const button = document.getElementById(tabId.replace('tab-column', 'btn-tab'));
                
                content.classList.add('active');
                button.classList.add('active');

                if (tabId === 'tab-column4') {
                    App.Invoice.setCurrentInvoiceDate();
                    App.Invoice.updateAllItemPrices();
                }
            },

            fetchLivePrices: async function() {
                const CF_WORKER_URL = 'https://gold.sprome.workers.dev/latest';
                let data = null;
                let fetchedFrom = "";

                try {
                    const response = await fetch(CF_WORKER_URL, { signal: AbortSignal.timeout(10000) });
                    if (!response.ok) throw new Error('Network response was not ok.');
                    data = await response.json();
                    fetchedFrom = "";
                } catch (error) {
                    console.error("Could not fetch prices from primary source:", error);
                    App.UI.showMessage("خطا در دریافت قیمت‌های لحظه‌ای.");
                    return;
                }

                if (!data) return;
                
                App.liveGoldPrice18k = data.gold_18k_toman > 0 ? data.gold_18k_toman : 0;
                App.liveMesghalPrice = data.gold_mesghal_toman > 0 ? data.gold_mesghal_toman : 0;
                
                this.updateNavbarPrices(data, fetchedFrom);
                this.updateCalculatorPrices();
                
                const activeTab = document.querySelector('.tab-content.active');
                if (activeTab && App[activeTab.dataset.module]) {
                     App[activeTab.dataset.module].recalculate();
                }
            },
            
            updateNavbarPrices: function(data, source) {
                const U = App.Utils;
                const updateDisplay = (id, value) => {
                    const el = document.getElementById(id);
                    if (el) el.textContent = value !== undefined && !isNaN(value) ? U.formatNumber(Math.round(value)) : '--';
                };
                
                updateDisplay('display-dollar-price', data.dollar_toman/10);
                updateDisplay('display-gold18k-price', data.gold_18k_toman);
                updateDisplay('display-ounce-price', data.gold_ounce_dollar);
                updateDisplay('display-mesghal-price', data.gold_mesghal_toman);
                updateDisplay('display-sekke-jadid-price', data.sekke_jadid_toman);
                updateDisplay('display-sekke-nim-price', data.sekke_nim_toman);
                updateDisplay('display-sekke-rob-price', data.sekke_rob_toman);

                const updatedEl = document.getElementById('display-last-updated');
                if (updatedEl && data.timestamp) {
                    const date = new Date(data.timestamp);
                    const formattedTime = new Intl.DateTimeFormat('fa-IR', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Tehran', numberingSystem: 'arab' }).format(date);
                    updatedEl.textContent = ` ${formattedTime} ${source}`;
                }
            },

            updateCalculatorPrices: function() {
                if (App.liveGoldPrice18k > 0) {
                    ['1', '2', '3'].forEach(i => {
                        const priceInputId = `price_gram${i}`;
                        if (!App.userModifiedPrices[priceInputId]) {
                            document.getElementById(priceInputId).value = App.Utils.formatNumber(App.liveGoldPrice18k);
                        }
                    });
                }
                if (App.liveMesghalPrice > 0) {
                    const priceInputId = 'price_mesghal6';
                    if (!App.userModifiedPrices[priceInputId]) {
                        document.getElementById(priceInputId).value = App.Utils.formatNumber(App.liveMesghalPrice);
                    }
                }
                App.Invoice.updateAllItemPrices();
            }
        },

        Calculators: {
             recalculate: function(id) {
                const calcId = id || document.querySelector('.tab-content.active').id.replace('tab-column', 'column');
                if(this[`calculate${calcId}`]) this[`calculate${calcId}`]();
             },
             calculatecolumn1: function() {
                const U = App.Utils;
                const profit = U.getInputValue('profit1');
                const wage = U.getInputValue('wage1');
                const VAT_rate = U.getInputValue('VAT1');
                const price_gram_18k_input = U.getInputValue('price_gram1');
                const price_whole = U.getInputValue('price_whole1');
                const purity = U.getInputValue('goldPurity1');

                const adjusted_price_gram = price_gram_18k_input * (purity / 750);

                const labor_cost_factor = wage / 100;
                const profit_markup_factor = profit / 100;
                const tax_factor = VAT_rate / 100;
                
                const total_factor = (1 + labor_cost_factor) * (1 + profit_markup_factor);
                const tax_base = (labor_cost_factor + (1 + labor_cost_factor) * profit_markup_factor);
                const final_factor = total_factor + (tax_base * tax_factor);
                
                const calculated_weight = price_whole / (adjusted_price_gram * final_factor);
                const rounded_weight = parseFloat(calculated_weight.toFixed(2));
                
                const price_before_tax = rounded_weight * adjusted_price_gram * total_factor;
                const tax_amount = (rounded_weight * adjusted_price_gram * tax_base) * tax_factor;

                document.getElementById('display-weight1').textContent = U.formatNumber(rounded_weight);
                document.getElementById('display-tax1').textContent = U.formatNumber(Math.round(tax_amount));
                document.getElementById('display-price-before-tax1').textContent = U.formatNumber(Math.round(price_before_tax));
                
                if (rounded_weight > 0) {
                    document.getElementById('invoiceFromCalc1').classList.remove('hidden');
                }
             },
             calculatecolumn2: function() {
                const U = App.Utils;
                const weight = U.getInputValue('weight2');
                const price_gram_18k = U.getInputValue('price_gram2');
                const wage = U.getInputValue('wage2');
                const profit = U.getInputValue('profit2');
                const VAT_rate = U.getInputValue('VAT2');
                const purity = U.getInputValue('goldPurity2');
                const adjusted_weight_to_750 = weight * (purity / 750);
                const adjusted_price_gram = price_gram_18k * (purity / 750);
                
                const price_of_gold = weight * adjusted_price_gram;
                const labor_cost = price_of_gold * (wage / 100);
                const profit_amount = (price_of_gold + labor_cost) * (profit / 100);
                const tax_base = labor_cost + profit_amount;
                const tax_amount = tax_base * (VAT_rate / 100);
                
                const price_before_tax = price_of_gold + tax_base;
                const final_price = price_before_tax + tax_amount;
                const final_price_per_gram = final_price / weight;
                
                document.getElementById('display-price-after-tax2').textContent = U.formatNumber(Math.round(final_price));
                document.getElementById('display-adjusted_wheight_to_750').textContent = U.formatNumber((adjusted_weight_to_750));
                document.getElementById('display-tax2').textContent = U.formatNumber(Math.round(tax_amount));
                document.getElementById('display-weight2').textContent = U.formatNumber(Math.round(price_before_tax));
                document.getElementById('display-gram-price-after-tax2').textContent = isFinite(final_price_per_gram) ? U.formatNumber(Math.round(final_price_per_gram)) : '0';

                if (weight > 0) {
                    document.getElementById('invoiceFromCalc2').classList.remove('hidden');
                }
             },
             calculatecolumn3: function() {
                const U = App.Utils;
                const weight = U.getInputValue('weight_input3');
                const price_gram_18k = U.getInputValue('price_gram3');
                const purity = U.getInputValue('goldPurity3');

                const adjusted_price_gram = price_gram_18k * (purity / 750) * (735 / 750);
                
                const final_price = weight * adjusted_price_gram;
                document.getElementById('display-total-price3').textContent = U.formatNumber(Math.round(final_price));
                
                if (weight > 0) {
                    document.getElementById('invoiceFromCalc3').classList.remove('hidden');
                }
             },
             calculatecolumn6: function() {
                const U = App.Utils;
                const weight = U.getInputValue('weight_mesghal6');
                const price_mesghal_750 = U.getInputValue('price_mesghal6');
                const actual_purity = U.getInputValue('goldPurity6', 750);
                const profit_for_melted = U.getInputValue('profit_melted');
                const buy_deduction = U.getInputValue('buy_deduction6');
                const transactionType = document.querySelector('input[name="transaction_type6"]:checked').value;

                const resultDisplay = document.getElementById('display-total-price6');
                const invoiceBtn = document.getElementById('invoiceFromCalc6');

                if (price_mesghal_750 <= 0 || weight <= 0 || actual_purity <= 0) {
                    resultDisplay.textContent = '0';
                    invoiceBtn.classList.add('hidden');
                    return;
                }

                const actual_value_per_mesghal = price_mesghal_750 * (actual_purity / 750);
                
                let effective_price_per_mesghal;

                if (transactionType === 'sell') {
                    effective_price_per_mesghal = actual_value_per_mesghal * (1 + profit_for_melted / 100);
                } else { // 'buy'
                    effective_price_per_mesghal = actual_value_per_mesghal - buy_deduction;
                }
                
                const final_price = weight * effective_price_per_mesghal;

                resultDisplay.textContent = U.formatNumber(Math.round(final_price));
                if (final_price > 0) {
                    invoiceBtn.classList.remove('hidden');
                } else {
                    invoiceBtn.classList.add('hidden');
                }
            }
        },

        Invoice: {
            recalculate: function() { this.updateTotal(); },
            setCurrentInvoiceDate: function() {
                const el = document.getElementById('invoiceDate');
                if (el && !el.value) {
                    const now = new Date();
                    const persianDate = new Intl.DateTimeFormat('fa-IR-u-nu-latn', { year: 'numeric', month: '2-digit', day: '2-digit', calendar: 'persian' }).format(now);
                    el.value = persianDate;
                }
            },
            updateAllItemPrices: function() {
                document.querySelectorAll('.gold-item-row').forEach(row => {
                    const itemId = row.dataset.itemId;
                    if (row.dataset.isMelted === 'true') return; // Don't update price for melted items
                    const priceInputId = `itemGramPrice_${itemId}`;
                    if (!App.userModifiedPrices[priceInputId] && App.liveGoldPrice18k > 0) {
                        document.getElementById(priceInputId).value = App.Utils.formatNumber(App.liveGoldPrice18k);
                    }
                });
                this.updateTotal();
            },
            
            addGoldItemRow: function(itemData = {}) {
                const container = document.getElementById('goldItemsContainer');
                const newId = App.Utils.generateUniqueId();
                const newItem = document.createElement('div');
                newItem.className = 'gold-item-row border-b pb-4 mb-4 pt-4';
                newItem.dataset.itemId = newId;

                newItem.innerHTML = `
                    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        <div class="responsive-input-group flex flex-col lg:col-span-1">
                            <label for="itemDescription_${newId}" class="text-sm sm:text-base font-semibold text-dark-text mb-2">توضیحات:</label>
                            <div class="input-wrapper flex-1 flex items-center w-full"><input type="text" id="itemDescription_${newId}" class="w-full p-2 rounded-md bg-input-bg-light border border-input-border-light text-right text-sm"></div>
                        </div>
                        <div class="responsive-input-group flex flex-col">
                            <label for="itemWeight_${newId}" class="text-sm sm:text-base font-semibold text-dark-text mb-2">وزن:</label>
                            <div class="input-wrapper flex-1 flex items-center w-full"><input type="number" id="itemWeight_${newId}" class="w-full p-2 rounded-md bg-input-bg-light border border-input-border-light text-left text-sm" value="1" min="0" step="0.01"></div>
                        </div>
                        <div class="responsive-input-group flex flex-col">
                            <label for="itemPurity_${newId}" class="text-sm sm:text-base font-semibold text-dark-text mb-2">عیار:</label>
                            <div class="input-wrapper flex-1 flex items-center w-full"><input type="number" list="purity-list" id="itemPurity_${newId}" class="w-full p-2 rounded-md bg-input-bg-light border border-input-border-light text-left text-sm" value="750" step="any"></div>
                        </div>
                        <div class="responsive-input-group flex flex-col">
                            <label for="itemGramPrice_${newId}" class="text-sm sm:text-base font-semibold text-dark-text mb-2">فی هر گرم (۱۸):</label>
                            <div class="input-wrapper flex-1 flex items-center w-full"><input type="text" id="itemGramPrice_${newId}" class="w-full p-2 rounded-md bg-input-bg-light border border-input-border-light text-left text-sm" oninput="App.Utils.formatNumberInput(this)"></div>
                        </div>
                        <div class="responsive-input-group flex flex-col">
                            <label for="itemWage_${newId}" class="text-sm sm:text-base font-semibold text-dark-text mb-2">اجرت (%):</label>
                            <div class="input-wrapper flex-1 flex items-center w-full"><input type="number" id="itemWage_${newId}" class="w-full p-2 rounded-md bg-input-bg-light border border-input-border-light text-left text-sm" value="20" min="0" step="1"></div>
                        </div>
                    </div>
                    <button class="remove-item-btn mt-3 px-3 py-1 bg-red-500 text-white rounded-md text-xs hover:bg-red-600 transition-colors" data-item-id="${newId}"><i class="fas fa-trash-alt mr-1"></i>حذف آیتم</button>
                `;
                container.appendChild(newItem);

                // Populate with data
                document.getElementById(`itemDescription_${newId}`).value = itemData.description || itemData.name || '';
                document.getElementById(`itemWeight_${newId}`).value = itemData.weight || 1;
                document.getElementById(`itemPurity_${newId}`).value = itemData.purity || 750;

                if (itemData.isOldGold) {
                    newItem.dataset.isOldGold = 'true';
                }

                if (itemData.isMelted) {
                    newItem.dataset.isMelted = 'true';
                    newItem.dataset.finalPrice = itemData.finalPrice;

                    const gramPriceInput = document.getElementById(`itemGramPrice_${newId}`);
                    const wageInput = document.getElementById(`itemWage_${newId}`);
                    gramPriceInput.value = '---';
                    gramPriceInput.disabled = true;
                    wageInput.value = '---';
                    wageInput.disabled = true;
                } else {
                    document.getElementById(`itemWage_${newId}`).value = itemData.wage !== undefined ? itemData.wage : 20;
                    const priceInput = document.getElementById(`itemGramPrice_${newId}`);
                    let gramPriceToSet = itemData.gramPrice;

                    if (gramPriceToSet) {
                        App.userModifiedPrices[priceInput.id] = true;
                        priceInput.value = App.Utils.formatNumber(gramPriceToSet);
                    } else if (App.liveGoldPrice18k > 0) {
                        priceInput.value = App.Utils.formatNumber(App.liveGoldPrice18k);
                    }
                }

                this.updateTotal();
            },
            removeGoldItemRow: function(button) {
                const itemRow = button.closest('.gold-item-row');
                if (itemRow) {
                    const itemId = itemRow.dataset.itemId;
                    delete App.userModifiedPrices[`itemGramPrice_${itemId}`];
                    itemRow.remove();
                    if (document.getElementById('goldItemsContainer').children.length === 0) {
                        this.addGoldItemRow();
                    }
                    this.updateTotal();
                }
            },
            
            updateTotal: function() {
                const items = [];
                document.querySelectorAll('.gold-item-row').forEach(row => {
                    const itemId = row.dataset.itemId;
                    const isMelted = row.dataset.isMelted === 'true';
                    
                    const item = {
                        description: document.getElementById(`itemDescription_${itemId}`).value,
                        weight: App.Utils.getInputValue(`itemWeight_${itemId}`),
                        purity: App.Utils.getInputValue(`itemPurity_${itemId}`),
                        isOldGold: row.dataset.isOldGold === 'true',
                        isMelted: isMelted
                    };

                    if (isMelted) {
                        item.finalPrice = parseFloat(row.dataset.finalPrice || 0);
                    } else {
                        item.gramPrice = App.Utils.getInputValue(`itemGramPrice_${itemId}`);
                        item.wage = App.Utils.getInputValue(`itemWage_${itemId}`);
                    }
                    items.push(item);
                });
                localStorage.setItem('goldInvoiceItems', JSON.stringify(items));
            },
            
            // =========================================================================
            // START OF MODIFIED INVOICE GENERATION FUNCTION
            // =========================================================================
            generateInvoice: function() {
                const U = App.Utils;
                const customerName = document.getElementById('customerName').value;
                const customerPhone = document.getElementById('customerPhone').value;
                const invoiceDate = document.getElementById('invoiceDate').value;

                U.setInputValueAndLocalStorage('customerName', customerName);
                U.setInputValueAndLocalStorage('customerPhone', customerPhone);

                const invoiceItemsData = [];

                document.querySelectorAll('.gold-item-row').forEach(row => {
                    const itemId = row.dataset.itemId;
                    const description = document.getElementById(`itemDescription_${itemId}`).value;
                    const purity = U.getInputValue(`itemPurity_${itemId}`, 750);
                    const weight = U.getInputValue(`itemWeight_${itemId}`);
                    const isMelted = row.dataset.isMelted === 'true';
                    const isOldGold = row.dataset.isOldGold === 'true';
                    
                    if (weight <= 0) return; // Skip items with no weight

                    const item = {
                        description: description || (isOldGold ? 'طلای کهنه' : (isMelted ? 'آبشده' : 'طلای ساخته شده')),
                        weight: weight,
                        purity: purity,
                        isMelted: isMelted,
                        transactionType: description.toLowerCase().includes('خرید') ? 'buy' : 'sell'
                    };

                    if (isMelted) {
                        item.finalPrice = parseFloat(row.dataset.finalPrice || 0);
                        const convertedWeight750 = item.weight * (item.purity / 750);
                        item.pricePer750Gram = convertedWeight750 > 0 ? item.finalPrice / convertedWeight750 : 0;
                        item.gramPrice = null;
                        item.wage = null;
                    } else if (isOldGold) {
                        const gramPrice = U.getInputValue(`itemGramPrice_${itemId}`);
                        const adjustedGramPrice = gramPrice * (item.purity / 750) * (735 / 750);
                        item.finalPrice = item.weight * adjustedGramPrice;
                        item.gramPrice = gramPrice;
                        item.wage = null;
                        item.pricePer750Gram = null;
                    } else { // New Gold
                        const gramPrice = U.getInputValue(`itemGramPrice_${itemId}`);
                        const wage = U.getInputValue(`itemWage_${itemId}`);
                        const adjustedGramPrice = gramPrice * (item.purity / 750);
                        const priceOfGold = item.weight * adjustedGramPrice;
                        const laborCost = priceOfGold * (wage / 100);
                        const profit = (priceOfGold + laborCost) * 0.07;
                        const tax = (laborCost + profit) * 0.10;
                        item.finalPrice = priceOfGold + laborCost + profit + tax;
                        item.gramPrice = gramPrice;
                        item.wage = wage;
                        item.pricePer750Gram = null;
                    }
                    invoiceItemsData.push(item);
                });

                if (invoiceItemsData.length === 0) {
                    App.UI.showMessage('لطفا حداقل یک آیتم معتبر برای صدور فاکتور وارد کنید.');
                    return;
                }

                let totalSales = 0;
                let totalPurchases = 0;
                let itemsHtml = '';
                
                invoiceItemsData.forEach((item, i) => {
                    if (item.transactionType === 'buy') {
                        totalPurchases += item.finalPrice;
                    } else {
                        totalSales += item.finalPrice;
                    }

                    // *** CHANGE STARTS HERE ***
                    // Conditionally render the row based on whether the item is melted gold
                    if (item.isMelted) {
                        itemsHtml += `
                            <tr style="border-bottom: 1px solid #ccc; ${item.transactionType === 'buy' ? 'background-color: #fff5f5;' : ''}">
                                <td style="padding: 4px; text-align: center;">${i + 1}</td>
                                <td style="padding: 4px;">${item.description}</td>
                                <td style="padding: 4px; text-align: center;">${U.formatNumber(item.weight.toFixed(3))}</td>
                                <td style="padding: 4px; text-align: center;">${item.purity}</td>
                                <td style="padding: 4px; text-align: center;">${item.pricePer750Gram ? U.formatNumber(Math.round(item.pricePer750Gram)) : '---'}</td>
                                <td style="padding: 4px; text-align: center;">---</td>
                                <td style="padding: 4px; text-align: center;">---</td>
                                <td style="padding: 4px; text-align: center;">${U.formatNumber(Math.round(item.finalPrice))}</td>
                            </tr>
                        `;
                    } else {
                        itemsHtml += `
                            <tr style="border-bottom: 1px solid #ccc; ${item.transactionType === 'buy' ? 'background-color: #fff5f5;' : ''}">
                                <td style="padding: 4px; text-align: center;">${i + 1}</td>
                                <td style="padding: 4px;">${item.description}</td>
                                <td style="padding: 4px; text-align: center;">${U.formatNumber(item.weight.toFixed(3))}</td>
                                <td style="padding: 4px; text-align: center;">${item.purity}</td>
                                <td style="padding: 4px; text-align: center;">${item.pricePer750Gram ? U.formatNumber(Math.round(item.pricePer750Gram)) : '---'}</td>
                                <td style="padding: 4px; text-align: center;">${item.gramPrice ? U.formatNumber(Math.round(item.gramPrice)) : '---'}</td>
                                <td style="padding: 4px; text-align: center;">${item.wage !== null ? item.wage + '%' : '---'}</td>
                                <td style="padding: 4px; text-align: center;">${U.formatNumber(Math.round(item.finalPrice))}</td>
                            </tr>
                        `;
                    }
                    // *** CHANGE ENDS HERE ***
                });
                
                const finalPayableAmount = totalSales - totalPurchases;
                const hasBuyAndSell = totalSales > 0 && totalPurchases > 0;

                let footerHtml;
                if (hasBuyAndSell) {
                    footerHtml = `
                        <div style="font-size: 10pt; line-height: 1.6;">
                            <div>جمع کل فروش: <span style="font-weight: bold;">${U.formatNumber(Math.round(totalSales))}</span> تومان</div>
                            <div>جمع کل خرید: <span style="font-weight: bold;">${U.formatNumber(Math.round(totalPurchases))}</span> تومان</div>
                            <hr style="border: 0; border-top: 1px solid #ccc; margin: 4px 0;" />
                            <div style="font-size: 11pt;"><strong>مبلغ نهایی ${finalPayableAmount >= 0 ? 'پرداختی' : 'دریافتی'}: </strong>
                                <span style="font-size: 1.4rem; font-weight: bold;">${U.formatNumber(Math.round(Math.abs(finalPayableAmount)))}</span> تومان
                            </div>
                        </div>
                    `;
                } else {
                     footerHtml = `
                        <div style="font-size: 11pt;"><strong>مبلغ قابل پرداخت: </strong><span style="font-size: 1.4rem; font-weight: bold;">${U.formatNumber(Math.round(finalPayableAmount))}</span> تومان</div>
                    `;
                }

                const invoiceContent = `
<div style="font-family: sans-serif; direction: rtl; width: 190mm; margin: auto; font-size: 10pt; color: #333;">
    <header style="display: flex; justify-content: space-between; align-items: center; border-bottom: 2px solid #DAA520; padding-bottom: 10px; margin-bottom: 15px;">
        <p style="margin: 4px 0;"><i class="fas fa-map-marker-alt" style="margin-left: 5px; color: #DAA520;"></i>خوی، مجتمع تجاری اداری آنا آتا</p>
        <div style="display: flex; flex-direction: column; align-items: center;">
            <img src="logo.png" alt="لوگو" style="height: 50px; width: auto;">
            <h1 style="margin: 5px 0 0; color: #DAA520; font-size: 1.2rem; text-align: center;">جواهری فانی</h1>
        </div>
        <p style="margin: 4px 0;"><i class="fas fa-phone-alt" style="margin-left: 5px; color: #DAA520;"></i>09141610649</p>
    </header>
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px; font-size: 9pt;">
        <div><strong>نام مشتری:</strong> ${customerName || 'نامشخص'}</div>
        <div><strong>شماره تماس:</strong> ${customerPhone || 'نامشخص'}</div>
        <div><strong>تاریخ:</strong> ${invoiceDate}</div>
    </div>
    <table style="width: 100%; border-collapse: collapse; font-size: 8.5pt;">
        <thead>
            <tr style="background-color: #f0f0f0;">
                <th style="padding: 4px; border: 1px solid #ccc;">ردیف</th>
                <th style="padding: 4px; border: 1px solid #ccc; text-align: right; width: 25%;">شرح کالا</th>
                <th style="padding: 4px; border: 1px solid #ccc;">وزن (گرم)</th>
                <th style="padding: 4px; border: 1px solid #ccc;">عیار</th>
                <th style="padding: 4px; border: 1px solid #ccc;">فی گرم (750)</th>
                <th style="padding: 4px; border: 1px solid #ccc;">فی گرم (۱۸)</th>
                <th style="padding: 4px; border: 1px solid #ccc;">اجرت</th>
                <th style="padding: 4px; border: 1px solid #ccc;">مبلغ نهایی (تومان)</th>
            </tr>
        </thead>
        <tbody>${itemsHtml}</tbody>
    </table>
    <footer style="margin-top: 20px; display: flex; justify-content: space-between; align-items: flex-end;">
        ${footerHtml}
        <div style="text-align: center;">
            <p style="margin-bottom: 25px;">امضای فروشنده</p>
            <div style="border-top: 1px solid #333; width: 150px;"></div>
        </div>
    </footer>
</div>`;
                
                document.getElementById('invoicePreviewContainerWrapper').classList.remove('hidden');
                document.getElementById('invoicePreviewContainer').innerHTML = invoiceContent;
                document.getElementById('print-area').innerHTML = invoiceContent;
                
                setTimeout(() => window.print(), 200);
            },
            // =========================================================================
            // END OF MODIFIED INVOICE GENERATION FUNCTION
            // =========================================================================
        },

        init: function() {
            this.DB.initDB();
            this.Utils.loadValuesFromLocalStorage();
            
            const savedItems = JSON.parse(localStorage.getItem('goldInvoiceItems') || '[]');
            if (savedItems.length > 0) {
                document.getElementById('goldItemsContainer').innerHTML = ''; // Clear default
                savedItems.forEach(itemData => this.Invoice.addGoldItemRow(itemData));
            } else {
                 this.Invoice.addGoldItemRow();
            }

            this.UI.fetchLivePrices();
            setInterval(() => this.UI.fetchLivePrices(), 60000); 
            
            this.UI.showTab('tab-column1');

            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.addEventListener('click', () => this.UI.showTab(btn.id.replace('btn-tab', 'tab-column')));
            });

            document.querySelectorAll('[id^="calculateBtn"]').forEach(btn => {
                btn.addEventListener('click', () => this.Calculators.recalculate(btn.id.replace('calculateBtn', 'column')));
            });
            
            document.getElementById('generateInvoiceBtn').addEventListener('click', () => this.Invoice.generateInvoice());
            document.getElementById('addGoldItemBtn').addEventListener('click', () => this.Invoice.addGoldItemRow());

            document.getElementById('goldItemsContainer').addEventListener('click', (e) => {
                const button = e.target.closest('.remove-item-btn');
                if (button) this.Invoice.removeGoldItemRow(button);
            });
            
            document.getElementById('goldItemsContainer').addEventListener('input', (e) => {
                const targetId = e.target.id;
                if (targetId.startsWith('itemGramPrice_')) {
                    App.userModifiedPrices[targetId] = true;
                }
                App.Invoice.updateTotal(); 
            });

            ['1', '2', '3'].forEach(i => {
                document.getElementById(`price_gram${i}`).addEventListener('input', (e) => {
                    this.Utils.formatNumberInput(e.target);
                    this.userModifiedPrices[e.target.id] = true;
                    this.Calculators.recalculate(`column${i}`);
                });
                document.getElementById(`goldPurity${i}`).addEventListener('change', () => {
                    this.Calculators.recalculate(`column${i}`);
                });
            });
            
            document.getElementById('price_mesghal6').addEventListener('input', (e) => {
                this.Utils.formatNumberInput(e.target);
                this.userModifiedPrices[e.target.id] = true;
            });

            ['price_mesghal6', 'weight_mesghal6', 'goldPurity6', 'profit_melted', 'buy_deduction6'].forEach(id => {
                 document.getElementById(id).addEventListener('input', () => this.Calculators.recalculate('column6'));
            });

            const meltedProfitContainer = document.getElementById('profit_melted').parentElement.parentElement;
            const meltedDeductionContainer = document.getElementById('buyDeductionContainer6');

            const handleTransactionTypeChange = () => {
                const type = document.querySelector('input[name="transaction_type6"]:checked').value;
                if (type === 'buy') {
                    meltedProfitContainer.classList.add('hidden');
                    meltedDeductionContainer.classList.remove('hidden');
                } else { // 'sell'
                    meltedProfitContainer.classList.remove('hidden');
                    meltedDeductionContainer.classList.add('hidden');
                }
                this.Calculators.recalculate('column6');
            };

            document.querySelectorAll('input[name="transaction_type6"]').forEach(radio => {
                radio.addEventListener('change', (e) => {
                    handleTransactionTypeChange();
                    localStorage.setItem(e.target.name, e.target.value);
                });
            });

            handleTransactionTypeChange(); // Set initial state on load

            document.getElementById('invoiceFromCalc1').addEventListener('click', () => {
                const U = App.Utils;
                const weight = parseFloat(document.getElementById('display-weight1').textContent.replace(/,/g, ''));
                if (weight > 0 && !isNaN(weight)) {
                    const itemData = {
                        description: `محصول محاسبه‌شده`,
                        weight: weight,
                        purity: U.getInputValue('goldPurity1'),
                        wage: U.getInputValue('wage1'),
                        gramPrice: U.getInputValue('price_gram1')
                    };
                    App.UI.showTab('tab-column4');
                    App.Invoice.addGoldItemRow(itemData);
                    App.UI.showMessage('آیتم با موفقیت به فاکتور اضافه شد.', 'success');
                } else {
                    App.UI.showMessage('ابتدا یک محاسبه معتبر انجام دهید.');
                }
            });

            document.getElementById('invoiceFromCalc2').addEventListener('click', () => {
                const U = App.Utils;
                const weight = U.getInputValue('weight2');
                if (weight > 0) {
                    const itemData = {
                        description: `محصول محاسبه‌شده`,
                        weight: weight,
                        purity: U.getInputValue('goldPurity2'),
                        wage: U.getInputValue('wage2'),
                        gramPrice: U.getInputValue('price_gram2')
                    };
                    App.UI.showTab('tab-column4');
                    App.Invoice.addGoldItemRow(itemData);
                    App.UI.showMessage('آیتم با موفقیت به فاکتور اضافه شد.', 'success');
                } else {
                    App.UI.showMessage('لطفا یک وزن معتبر وارد کنید.');
                }
            });

            document.getElementById('invoiceFromCalc3').addEventListener('click', () => {
                const U = App.Utils;
                const weight = U.getInputValue('weight_input3');
                if (weight > 0) {
                    const purity = U.getInputValue('goldPurity3');
                    const itemData = {
                        description: `خرید طلای کهنه`,
                        weight: weight,
                        purity: purity,
                        wage: 0, 
                        gramPrice: U.getInputValue('price_gram3'),
                        isOldGold: true
                    };
                    App.UI.showTab('tab-column4');
                    App.Invoice.addGoldItemRow(itemData);
                    App.UI.showMessage('آیتم طلای کهنه با موفقیت به فاکتور اضافه شد.', 'success');
                } else {
                    App.UI.showMessage('لطفا یک وزن معتبر وارد کنید.');
                }
            });
            
            document.getElementById('invoiceFromCalc6').addEventListener('click', () => {
                const U = App.Utils;
                const finalPrice = U.unformatNumber(document.getElementById('display-total-price6').textContent);

                if (finalPrice > 0) {
                    const type = document.querySelector('input[name="transaction_type6"]:checked').value;
                    const itemData = {
                        description: (type === 'buy' ? 'خرید' : 'فروش') + ' آبشده',
                        weight: U.getInputValue('weight_mesghal6') * 4.6083, // Convert to grams
                        purity: U.getInputValue('goldPurity6'),
                        finalPrice: finalPrice,
                        isMelted: true
                    };
                    App.UI.showTab('tab-column4');
                    App.Invoice.addGoldItemRow(itemData);
                    App.UI.showMessage('آیتم آبشده با موفقیت به فاکتور اضافه شد.', 'success');
                } else {
                    App.UI.showMessage('ابتدا یک محاسبه معتبر انجام دهید.');
                }
            });

            const productForm = document.getElementById('product-form');
            productForm.addEventListener('submit', (event) => {
                event.preventDefault();
                const product = {
                    name: document.getElementById('productName').value,
                    weight: this.Utils.getInputValue('productWeight'),
                    purity: this.Utils.getInputValue('productPurity'),
                    wage: this.Utils.getInputValue('productWage')
                };
                
                const productId = parseInt(document.getElementById('productId').value, 10);
                if (productId) product.id = productId;
                
                this.DB.saveProduct(product);
                productForm.reset();
                document.getElementById('productId').value = '';
                document.getElementById('product-form-title').textContent = 'افزودن جنس جدید';
                document.getElementById('product-form-submit-btn-text').textContent = 'ذخیره جنس';
                document.getElementById('cancelEditBtn').classList.add('hidden');
            });
            
            document.getElementById('cancelEditBtn').addEventListener('click', () => {
                 productForm.reset();
                 document.getElementById('productId').value = '';
                 document.getElementById('product-form-title').textContent = 'افزودن جنس جدید';
                 document.getElementById('product-form-submit-btn-text').textContent = 'ذخیره جنس';
                 document.getElementById('cancelEditBtn').classList.add('hidden');
            });

            document.getElementById('productSearch').addEventListener('input', (e) => {
                this.DB.searchProducts(e.target.value);
            });
            
            document.getElementById('productList').addEventListener('click', (e) => {
                const target = e.target;
                const action = target.dataset.action;
                const productId = parseInt(target.dataset.id, 10);
                if (!action || !productId) return;

                if (action === 'delete') {
                    this.UI.showConfirmation('آیا از حذف این جنس اطمینان دارید؟', () => {
                        this.DB.deleteProduct(productId);
                    });
                } else if (action === 'edit') {
                    this.DB.getProduct(productId, (product) => {
                        if (product) {
                            document.getElementById('productId').value = product.id;
                            document.getElementById('productName').value = product.name;
                            document.getElementById('productWeight').value = product.weight;
                            document.getElementById('productPurity').value = product.purity;
                            document.getElementById('productWage').value = product.wage;
                            document.getElementById('product-form-title').textContent = 'ویرایش جنس';
                            document.getElementById('product-form-submit-btn-text').textContent = 'بروزرسانی جنس';
                            document.getElementById('cancelEditBtn').classList.remove('hidden');
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                        }
                    });
                } else if (action === 'use') {
                    this.DB.getProduct(productId, (product) => {
                        if (product) {
                            this.UI.showTab('tab-column4');
                            this.Invoice.addGoldItemRow(product);
                            this.UI.showMessage(`جنس "${product.name}" به فاکتور اضافه شد.`, 'success');
                        }
                    });
                }
            });
        }
    };

    document.addEventListener('DOMContentLoaded', () => {
        App.init();
    });
</script>
</body>
</html>
